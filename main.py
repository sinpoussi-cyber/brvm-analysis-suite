# ==============================================================================
# ORCHESTRATEUR PRINCIPAL - SUPABASE UNIQUEMENT (V4.1 FINAL)
# ==============================================================================

import os
import logging
import sys
import psycopg2

# Importer les modules de chaque √©tape
import data_collector
import technical_analyzer
import prediction_analyzer
import fundamental_analyzer
import report_generator

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s: %(message)s')

def main():
    logging.info("="*80)
    logging.info("üöÄ BRVM ANALYSIS SUITE - SUPABASE UNIQUEMENT")
    logging.info("="*80)
    logging.info("Version: 4.1 Final (Corrections API Gemini + SQL)")
    logging.info("Base de donn√©es: Supabase (PostgreSQL)")
    logging.info("Mod√®le IA: gemini-1.5-flash-latest")
    logging.info("="*80)

    # --- √âtape 1 : Collecte des donn√©es (SUPABASE) ---
    try:
        logging.info("\n" + "="*80)
        logging.info("√âTAPE 1/5 : COLLECTE DES DONN√âES")
        logging.info("="*80)
        data_collector.run_data_collection()
        logging.info("‚úÖ Donn√©es collect√©es et sauvegard√©es dans Supabase")
    except Exception as e:
        logging.critical(f"‚ùå √âchec critique √† l'√©tape 1 : {e}", exc_info=True)
        sys.exit(1)

    # --- √âtape 2 : Analyse technique (SUPABASE) ---
    try:
        logging.info("\n" + "="*80)
        logging.info("√âTAPE 2/5 : ANALYSE TECHNIQUE")
        logging.info("="*80)
        technical_analyzer.run_technical_analysis()
        logging.info("‚úÖ Analyses techniques calcul√©es et sauvegard√©es dans Supabase")
    except Exception as e:
        logging.critical(f"‚ùå √âchec critique √† l'√©tape 2 : {e}", exc_info=True)
        sys.exit(1)

    # --- √âtape 3 : Pr√©dictions (SUPABASE) ---
    try:
        logging.info("\n" + "="*80)
        logging.info("√âTAPE 3/5 : G√âN√âRATION DES PR√âDICTIONS")
        logging.info("="*80)
        prediction_analyzer.run_prediction_analysis()
        logging.info("‚úÖ Pr√©dictions g√©n√©r√©es et sauvegard√©es dans Supabase")
    except Exception as e:
        logging.critical(f"‚ùå √âchec critique √† l'√©tape 3 : {e}", exc_info=True)
        sys.exit(1)

    # --- √âtape 4 : Analyse fondamentale (SUPABASE) ---
    new_fundamental_analyses = []
    try:
        logging.info("\n" + "="*80)
        logging.info("√âTAPE 4/5 : ANALYSE FONDAMENTALE (AVEC SYST√àME DE M√âMOIRE)")
        logging.info("="*80)
        
        # V√©rifier qu'au moins une cl√© API existe
        api_keys_available = any(os.environ.get(f'GOOGLE_API_KEY_{i}') for i in range(1, 23))
        
        if api_keys_available:
            analyzer = fundamental_analyzer.BRVMAnalyzer()
            _, new_fundamental_analyses = analyzer.run_and_get_results()
            logging.info("‚úÖ Analyses fondamentales g√©n√©r√©es et sauvegard√©es dans Supabase")
            logging.info(f"   üìä Nouvelles analyses : {len(new_fundamental_analyses)}")
        else:
            logging.warning("‚ö†Ô∏è  Aucune cl√© API Gemini trouv√©e")
            logging.warning("   √âtape 4 ignor√©e - Configurez GOOGLE_API_KEY_1 √† GOOGLE_API_KEY_22")
    except Exception as e:
        logging.error(f"‚ùå √âchec √† l'√©tape 4 : {e}", exc_info=True)
        logging.info("   Passage √† l'√©tape suivante...")

    # --- √âtape 5 : G√©n√©ration du rapport de synth√®se ---
    db_connection = None
    try:
        logging.info("\n" + "="*80)
        logging.info("√âTAPE 5/5 : G√âN√âRATION DES RAPPORTS")
        logging.info("="*80)
        
        # V√©rifier qu'au moins une cl√© API existe
        api_keys_available = any(os.environ.get(f'GOOGLE_API_KEY_{i}') for i in range(1, 23))
        
        if api_keys_available:
            DB_NAME = os.environ.get('DB_NAME')
            DB_USER = os.environ.get('DB_USER')
            DB_PASSWORD = os.environ.get('DB_PASSWORD')
            DB_HOST = os.environ.get('DB_HOST')
            DB_PORT = os.environ.get('DB_PORT')
            
            db_connection = psycopg2.connect(
                dbname=DB_NAME, 
                user=DB_USER, 
                password=DB_PASSWORD, 
                host=DB_HOST, 
                port=DB_PORT
            )
            
            final_report_generator = report_generator.ComprehensiveReportGenerator(db_connection)
            final_report_generator.generate_all_reports(new_fundamental_analyses)
            logging.info("‚úÖ Rapports g√©n√©r√©s avec succ√®s")
        else:
            logging.warning("‚ö†Ô∏è  Aucune cl√© API Gemini trouv√©e")
            logging.warning("   √âtape 5 ignor√©e - Configurez GOOGLE_API_KEY_1 √† GOOGLE_API_KEY_22")
    except Exception as e:
        logging.error(f"‚ùå √âchec √† l'√©tape 5 : {e}", exc_info=True)
    finally:
        if db_connection:
            db_connection.close()

    # --- R√©sum√© Final ---
    logging.info("\n" + "="*80)
    logging.info("üéâ SUITE D'ANALYSE BRVM COMPL√àTE TERMIN√âE")
    logging.info("="*80)
    logging.info("‚úÖ Architecture : Supabase (PostgreSQL) uniquement")
    logging.info("‚úÖ Mod√®le IA : gemini-1.5-flash-latest (API v1)")
    logging.info("üìä Tables mises √† jour :")
    logging.info("   ‚Ä¢ companies (soci√©t√©s cot√©es)")
    logging.info("   ‚Ä¢ historical_data (donn√©es de march√©)")
    logging.info("   ‚Ä¢ technical_analysis (indicateurs techniques)")
    logging.info("   ‚Ä¢ predictions (pr√©dictions 20 jours)")
    logging.info("   ‚Ä¢ fundamental_analysis (analyses IA)")
    logging.info("")
    logging.info("üìÅ Fichiers g√©n√©r√©s :")
    logging.info("   ‚Ä¢ Rapport_Synthese_Investissement_BRVM_*.docx")
    logging.info("")
    logging.info("üîó Acc√©dez √† vos donn√©es sur Supabase Dashboard")
    logging.info("="*80)

if __name__ == "__main__":
    main()
