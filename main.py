# ==============================================================================
# ORCHESTRATEUR PRINCIPAL - SYNCHRONISATION AUTOMATIQUE (V3.0)
# ==============================================================================

import os
import logging
import sys
import psycopg2

# Importer les modules de chaque √©tape
import data_collector  # Maintenant avec synchronisation auto
import technical_analyzer
import fundamental_analyzer
import report_generator

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s: %(message)s')

def main():
    logging.info("üöÄ D√âMARRAGE DE LA SUITE D'ANALYSE BRVM COMPL√àTE (SYNCHRONISATION AUTO) üöÄ")

    # --- √âtape 1 : Collecte des donn√©es (SYNC AUTO SUPABASE + GSHEET) ---
    try:
        logging.info("\n" + "="*60)
        logging.info("√âTAPE 1 : COLLECTE & SYNCHRONISATION DES DONN√âES")
        logging.info("="*60)
        data_collector.run_data_collection()
        logging.info("‚úÖ Donn√©es collect√©es et synchronis√©es (Supabase + Google Sheets)")
    except Exception as e:
        logging.critical(f"‚ùå √âchec critique √† l'√©tape 1 : {e}", exc_info=True)
        sys.exit(1)

    # --- √âtape 2 : Analyse technique (SYNC AUTO) ---
    try:
        logging.info("\n" + "="*60)
        logging.info("√âTAPE 2 : ANALYSE TECHNIQUE & SYNCHRONISATION")
        logging.info("="*60)
        technical_analyzer.run_technical_analysis()
        logging.info("‚úÖ Analyses techniques calcul√©es et synchronis√©es")
    except Exception as e:
        logging.critical(f"‚ùå √âchec critique √† l'√©tape 2 : {e}", exc_info=True)
        sys.exit(1)

    # --- √âtape 3 : Analyse fondamentale (SYNC AUTO) ---
    new_fundamental_analyses = []
    try:
        logging.info("\n" + "="*60)
        logging.info("√âTAPE 3 : ANALYSE FONDAMENTALE & SYNCHRONISATION")
        logging.info("="*60)
        
        if any(os.environ.get(f'GOOGLE_API_KEY_{i}') for i in range(1, 20)):
            analyzer = fundamental_analyzer.BRVMAnalyzer()
            _, new_fundamental_analyses = analyzer.run_and_get_results()
            logging.info("‚úÖ Analyses fondamentales g√©n√©r√©es et synchronis√©es")
        else:
            logging.warning("‚ö†Ô∏è Aucune cl√© API Gemini trouv√©e, √©tape 3 ignor√©e")
    except Exception as e:
        logging.error(f"‚ùå √âchec √† l'√©tape 3 : {e}", exc_info=True)

    # --- √âtape 4 : G√©n√©ration du rapport de synth√®se ---
    db_connection = None
    try:
        logging.info("\n" + "="*60)
        logging.info("√âTAPE 4 : G√âN√âRATION DES RAPPORTS")
        logging.info("="*60)
        
        if any(os.environ.get(f'GOOGLE_API_KEY_{i}') for i in range(1, 20)):
            DB_NAME = os.environ.get('DB_NAME')
            
            db_connection = psycopg2.connect(
                dbname=DB_NAME, 
                user=os.environ.get('DB_USER'), 
                password=os.environ.get('DB_PASSWORD'), 
                host=os.environ.get('DB_HOST'), 
                port=os.environ.get('DB_PORT')
            )
            final_report_generator = report_generator.ComprehensiveReportGenerator(db_connection)
            final_report_generator.generate_all_reports(new_fundamental_analyses)
            logging.info("‚úÖ Rapports g√©n√©r√©s avec succ√®s")
        else:
            logging.warning("‚ö†Ô∏è Aucune cl√© API Gemini trouv√©e, √©tape 4 ignor√©e")
    except Exception as e:
        logging.error(f"‚ùå √âchec √† l'√©tape 4 : {e}", exc_info=True)
    finally:
        if db_connection:
            db_connection.close()

    # --- R√©sum√© Final ---
    logging.info("\n" + "="*60)
    logging.info("üéâ SUITE D'ANALYSE BRVM COMPL√àTE TERMIN√âE üéâ")
    logging.info("="*60)
    logging.info("‚úÖ Toutes les donn√©es sont synchronis√©es :")
    logging.info("   ‚Üí Supabase (base de donn√©es principale)")
    logging.info("   ‚Üí Google Sheets (backup & visualisation)")
    logging.info("="*60)

if __name__ == "__main__":
    main()
