# ==============================================================================
# ORCHESTRATEUR PRINCIPAL - BRVM ANALYSIS SUITE
# ==============================================================================
import os
import logging
import sys

# Importer les modules de chaque √©tape
import data_collector
import fundamental_analyzer
import technical_analyzer
import report_generator  # NOUVEL IMPORT

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s: %(message)s')

def main():
    """
    Fonction principale qui ex√©cute la suite d'analyse BRVM dans l'ordre.
    1. Collecte des donn√©es quotidiennes.
    2. Analyse technique des donn√©es collect√©es.
    3. Analyse fondamentale des rapports de soci√©t√©s.
    4. G√©n√©ration du rapport de synth√®se final.
    """
    logging.info("üöÄ D√âMARRAGE DE LA SUITE D'ANALYSE BRVM COMPL√àTE üöÄ")

    # --- √âtape 1 : Collecte des donn√©es ---
    try:
        data_collector.run_data_collection()
        logging.info("‚úÖ √âtape 1/4 (Collecte de donn√©es) termin√©e avec succ√®s.")
    except Exception as e:
        logging.error(f"‚ùå √âchec critique √† l'√©tape 1 (Collecte de donn√©es): {e}", exc_info=True)
        sys.exit(1) # Arr√™te l'ex√©cution si la collecte √©choue

    # --- √âtape 2 : Analyse technique ---
    try:
        technical_analyzer.run_technical_analysis()
        logging.info("‚úÖ √âtape 2/4 (Analyse technique) termin√©e avec succ√®s.")
    except Exception as e:
        logging.error(f"‚ùå √âchec √† l'√©tape 2 (Analyse technique): {e}", exc_info=True)
        sys.exit(1) # Arr√™te l'ex√©cution, car le rapport final d√©pend des indicateurs

    # --- √âtape 3 : Analyse fondamentale ---
    fundamental_results = {}
    try:
        spreadsheet_id = '1EGXyg13ml8a9zr4OaUPnJN3i-rwVO2uq330yfxJXnSM'
        google_api_key = os.environ.get('GOOGLE_API_KEY')
        
        if not google_api_key:
            logging.warning("‚ö†Ô∏è La variable d'environnement GOOGLE_API_KEY n'est pas d√©finie. La partie fondamentale sera vide.")
        else:
            analyzer = fundamental_analyzer.BRVMAnalyzer(spreadsheet_id=spreadsheet_id, api_key=google_api_key)
            # Nous devons ex√©cuter l'analyse pour obtenir les r√©sultats en m√©moire
            if analyzer.configure_gemini() and analyzer.authenticate_google_services():
                analyzer.setup_selenium()
                if analyzer.driver and analyzer.verify_and_filter_companies():
                    fundamental_results = analyzer.process_all_companies()
                if analyzer.driver:
                    analyzer.driver.quit()
                    
            logging.info("‚úÖ √âtape 3/4 (Analyse fondamentale) termin√©e avec succ√®s.")
    except Exception as e:
        logging.error(f"‚ùå √âchec √† l'√©tape 3 (Analyse fondamentale): {e}", exc_info=True)
        # On continue m√™me si cette √©tape √©choue, le rapport sera g√©n√©r√© sans cette partie.

    # --- NOUVELLE √âTAPE 4 : G√©n√©ration du rapport de synth√®se ---
    try:
        spreadsheet_id = '1EGXyg13ml8a9zr4OaUPnJN3i-rwVO2uq330yfxJXnSM'
        google_api_key = os.environ.get('GOOGLE_API_KEY')

        if not google_api_key:
            logging.warning("‚ö†Ô∏è GOOGLE_API_KEY non disponible. Impossible de g√©n√©rer le rapport de synth√®se.")
        else:
            final_report_generator = report_generator.ComprehensiveReportGenerator(
                spreadsheet_id=spreadsheet_id,
                api_key=google_api_key
            )
            final_report_generator.generate_report(fundamental_results)
            logging.info("‚úÖ √âtape 4/4 (G√©n√©ration du rapport de synth√®se) termin√©e avec succ√®s.")

    except Exception as e:
        logging.error(f"‚ùå √âchec √† l'√©tape 4 (G√©n√©ration du rapport de synth√®se): {e}", exc_info=True)

    logging.info("üèÅ SUITE D'ANALYSE BRVM COMPL√àTE TERMIN√âE üèÅ")


if __name__ == "__main__":
    main()
