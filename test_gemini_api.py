# ==============================================================================
# SCRIPT DE TEST - V√âRIFICATION DES CL√âS API GEMINI (VERSION CORRIG√âE)
# ==============================================================================

import os
import requests
import logging
import time

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s: %(message)s')

def test_gemini_api_key(api_key, key_number):
    """Teste une cl√© API Gemini avec la configuration corrig√©e"""
    logging.info(f"\n{'='*60}")
    logging.info(f"TEST DE LA CL√â API #{key_number}")
    logging.info(f"{'='*60}")
    
    # Nettoyer la cl√©
    api_key = api_key.strip()
    
    # Masquer la cl√© pour la s√©curit√©
    masked_key = api_key[:8] + "..." + api_key[-4:] if len(api_key) > 12 else "***"
    logging.info(f"Cl√© : {masked_key}")
    
    # ‚úÖ CONFIGURATION CORRIG√âE
    test_configs = [
        # Option 1 : v1beta avec gemini-1.5-flash (RECOMMAND√â)
        {
            "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent",
            "model": "gemini-1.5-flash",
            "version": "v1beta",
            "use_header": True  # Utiliser x-goog-api-key dans le header
        },
        # Option 2 : v1 avec gemini-1.5-flash
        {
            "url": "https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent",
            "model": "gemini-1.5-flash",
            "version": "v1",
            "use_header": True
        },
        # Option 3 : v1 avec gemini-pro (plus ancien mais stable)
        {
            "url": "https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent",
            "model": "gemini-pro",
            "version": "v1",
            "use_header": True
        },
    ]
    
    # Requ√™te de test simple
    test_request = {
        "contents": [{
            "parts": [{"text": "Dis bonjour en fran√ßais en une phrase"}]
        }],
        "generationConfig": {
            "temperature": 0.7,
            "maxOutputTokens": 50
        }
    }
    
    for idx, config in enumerate(test_configs, 1):
        url = config["url"]
        model_name = config["model"]
        api_version = config["version"]
        use_header = config["use_header"]
        
        logging.info(f"\n  Test {idx}/{len(test_configs)} : Mod√®le '{model_name}' (API {api_version})")
        
        try:
            # ‚úÖ HEADERS CORRIG√âS
            if use_header:
                headers = {
                    "Content-Type": "application/json",
                    "x-goog-api-key": api_key
                }
                test_url = url
            else:
                headers = {"Content-Type": "application/json"}
                test_url = f"{url}?key={api_key}"
            
            response = requests.post(test_url, headers=headers, json=test_request, timeout=15)
            
            if response.status_code == 200:
                logging.info(f"    ‚úÖ SUCC√àS ! Ce mod√®le fonctionne")
                try:
                    result = response.json()
                    answer = result['candidates'][0]['content']['parts'][0]['text']
                    logging.info(f"    üìù R√©ponse: {answer[:80]}...")
                    return True, config
                except Exception as e:
                    logging.info(f"    ‚ö†Ô∏è  R√©ponse re√ßue mais format inattendu: {e}")
                    
            elif response.status_code == 404:
                logging.warning(f"    ‚ùå 404 - Mod√®le ou endpoint non trouv√©")
                logging.warning(f"       URL test√©e: {test_url[:80]}...")
                
            elif response.status_code == 403:
                logging.error(f"    ‚ùå 403 - Acc√®s refus√©. V√©rifiez:")
                logging.error(f"       ‚Ä¢ Cl√© API valide?")
                logging.error(f"       ‚Ä¢ API Generative Language activ√©e dans GCP?")
                logging.error(f"       ‚Ä¢ Restrictions sur la cl√©?")
                
            elif response.status_code == 429:
                logging.warning(f"    ‚ö†Ô∏è  429 - Quota d√©pass√©")
                
            elif response.status_code == 400:
                logging.error(f"    ‚ùå 400 - Requ√™te invalide")
                logging.error(f"       R√©ponse: {response.text[:200]}")
                
            else:
                logging.warning(f"    ‚ùå Erreur {response.status_code}")
                logging.warning(f"       R√©ponse: {response.text[:200]}")
                
        except requests.exceptions.Timeout:
            logging.error(f"    ‚ùå Timeout - Le serveur ne r√©pond pas")
        except requests.exceptions.ConnectionError:
            logging.error(f"    ‚ùå Erreur de connexion")
        except Exception as e:
            logging.error(f"    ‚ùå Erreur: {str(e)[:150]}")
    
    return False, None

def main():
    logging.info("üîç D√âMARRAGE DU TEST DES CL√âS API GEMINI (VERSION CORRIG√âE)")
    logging.info("üìã Configuration: v1beta avec x-goog-api-key header")
    logging.info("üìù Version du script: 7.4\n")
    
    # Charger les cl√©s
    api_keys = []
    for i in range(1, 34):
        key = os.environ.get(f'GOOGLE_API_KEY_{i}')
        if key:
            api_keys.append((i, key.strip()))
    
    if not api_keys:
        logging.error("‚ùå Aucune cl√© API trouv√©e dans les variables d'environnement")
        logging.error("\nüí° Configuration requise:")
        logging.error("   export GOOGLE_API_KEY_1='votre_cl√©'")
        logging.error("   export GOOGLE_API_KEY_2='votre_cl√©'")
        logging.error("   etc.")
        return
    
    logging.info(f"üìä {len(api_keys)} cl√©(s) API trouv√©e(s)\n")
    
    working_keys = []
    failed_keys = []
    
    for key_num, key in api_keys:
        success, working_config = test_gemini_api_key(key, key_num)
        
        if success:
            working_keys.append((key_num, working_config))
        else:
            failed_keys.append(key_num)
        
        if key_num < len(api_keys):
            logging.info("\n‚è≥ Pause de 2 secondes...")
            time.sleep(2)
    
    # R√©sum√©
    logging.info("\n" + "="*60)
    logging.info("üìä R√âSUM√â DES TESTS")
    logging.info("="*60)
    logging.info(f"‚úÖ Cl√©s fonctionnelles : {len(working_keys)}/{len(api_keys)}")
    
    if working_keys:
        logging.info(f"\nüéâ Cl√©s API fonctionnelles:")
        for key_num, config in working_keys[:5]:
            logging.info(f"   ‚Ä¢ Cl√© #{key_num} : Mod√®le '{config['model']}' (API {config['version']})")
        
        if len(working_keys) > 5:
            logging.info(f"   ... et {len(working_keys) - 5} autres")
        
        recommended = working_keys[0][1]
        logging.info(f"\nüí° CONFIGURATION RECOMMAND√âE:")
        logging.info(f"   GEMINI_MODEL = \"{recommended['model']}\"")
        logging.info(f"   GEMINI_API_VERSION = \"{recommended['version']}\"")
        logging.info(f"\nüìã Format de requ√™te:")
        logging.info(f"   URL: {recommended['url']}")
        logging.info(f"   Headers: {{'Content-Type': 'application/json', 'x-goog-api-key': api_key}}")
        
        logging.info(f"\nüìà CAPACIT√â:")
        logging.info(f"   ‚Ä¢ {len(working_keys) * 15} requ√™tes/minute")
        logging.info(f"   ‚Ä¢ {len(working_keys) * 1500:,} requ√™tes/jour")
    
    if failed_keys:
        logging.warning(f"\n‚ö†Ô∏è  Cl√©s en erreur : {failed_keys}")
        logging.warning(f"\nüîß V√âRIFICATIONS:")
        logging.warning(f"   1. Cl√© cr√©√©e sur: https://aistudio.google.com/app/apikey")
        logging.warning(f"   2. API 'Generative Language API' activ√©e dans GCP")
        logging.warning(f"   3. Pas de restrictions d'API sur la cl√©")
        logging.warning(f"   4. Quota non d√©pass√©")
    
    percentage = (len(working_keys) / len(api_keys) * 100) if api_keys else 0
    logging.info(f"\n‚úÖ TAUX DE SUCC√àS : {percentage:.1f}%")
    
    if percentage >= 70:
        logging.info(f"‚úÖ SYST√àME PR√äT - Vous pouvez lancer le workflow")
        return 0
    else:
        logging.warning(f"‚ö†Ô∏è  CORRECTIONS N√âCESSAIRES - Corrigez les cl√©s en erreur")
        return 1

if __name__ == "__main__":
    import sys
    exit_code = main()
    sys.exit(exit_code)
