# ==============================================================================
# SCRIPT DE TEST - V√âRIFICATION DES 33 CL√âS API GEMINI (VERSION 7.3)
# ==============================================================================

import os
import requests
import logging
import time

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s: %(message)s')

def test_gemini_api_key(api_key, key_number):
    """
    Teste une cl√© API Gemini avec une requ√™te simple
    Bas√© sur les versions disponibles: v1, v2, v2beta, v2internal, v3, v3beta
    """
    logging.info(f"\n{'='*60}")
    logging.info(f"TEST DE LA CL√â API #{key_number}")
    logging.info(f"{'='*60}")
    
    # Masquer la cl√© pour la s√©curit√©
    masked_key = api_key[:8] + "..." + api_key[-4:] if len(api_key) > 12 else "***"
    logging.info(f"Cl√© : {masked_key}")
    
    # URLs √† tester (dans l'ordre de priorit√© bas√© sur VOS versions)
    test_urls = [
        # ‚úÖ Option 1 : v2beta avec gemini-1.5-flash (RECOMMAND√â)
        {
            "url": f"https://generativelanguage.googleapis.com/v2beta/models/gemini-1.5-flash:generateContent?key={api_key}",
            "model": "gemini-1.5-flash",
            "version": "v2beta"
        },
        # Option 2 : v2beta avec gemini-1.5-flash-latest
        {
            "url": f"https://generativelanguage.googleapis.com/v2beta/models/gemini-1.5-flash-latest:generateContent?key={api_key}",
            "model": "gemini-1.5-flash-latest",
            "version": "v2beta"
        },
        # Option 3 : v3beta avec gemini-1.5-flash
        {
            "url": f"https://generativelanguage.googleapis.com/v3beta/models/gemini-1.5-flash:generateContent?key={api_key}",
            "model": "gemini-1.5-flash",
            "version": "v3beta"
        },
        # Option 4 : v2 avec gemini-1.5-flash
        {
            "url": f"https://generativelanguage.googleapis.com/v2/models/gemini-1.5-flash:generateContent?key={api_key}",
            "model": "gemini-1.5-flash",
            "version": "v2"
        },
        # Option 5 : v1 avec gemini-1.5-flash
        {
            "url": f"https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent?key={api_key}",
            "model": "gemini-1.5-flash",
            "version": "v1"
        },
        # Option 6 : v1 avec gemini-pro (mod√®le plus ancien mais stable)
        {
            "url": f"https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent?key={api_key}",
            "model": "gemini-pro",
            "version": "v1"
        },
        # Option 7 : v3 avec gemini-1.5-flash
        {
            "url": f"https://generativelanguage.googleapis.com/v3/models/gemini-1.5-flash:generateContent?key={api_key}",
            "model": "gemini-1.5-flash",
            "version": "v3"
        },
    ]
    
    # Test simple
    test_request = {
        "contents": [{
            "parts": [{"text": "Dis bonjour en fran√ßais"}]
        }],
        "generationConfig": {
            "temperature": 0.7,
            "maxOutputTokens": 50
        }
    }
    
    headers = {"Content-Type": "application/json"}
    
    for idx, test_config in enumerate(test_urls, 1):
        url = test_config["url"]
        model_name = test_config["model"]
        api_version = test_config["version"]
        
        logging.info(f"\n  Test {idx}/{len(test_urls)} : Mod√®le '{model_name}' (API {api_version})")
        
        try:
            response = requests.post(url, json=test_request, headers=headers, timeout=15)
            
            if response.status_code == 200:
                logging.info(f"    ‚úÖ SUCC√àS ! Ce mod√®le fonctionne")
                try:
                    result = response.json()
                    answer = result['candidates'][0]['content']['parts'][0]['text']
                    logging.info(f"    üìù R√©ponse: {answer[:50]}...")
                    return True, test_config  # Retourner la config qui fonctionne
                except:
                    logging.info(f"    ‚ö†Ô∏è  R√©ponse re√ßue mais format inattendu")
                    
            elif response.status_code == 404:
                logging.warning(f"    ‚ùå 404 - Mod√®le non trouv√© ou API version non activ√©e")
                
            elif response.status_code == 403:
                logging.error(f"    ‚ùå 403 - Acc√®s refus√©. V√©rifiez les permissions de la cl√©")
                
            elif response.status_code == 429:
                logging.warning(f"    ‚ö†Ô∏è  429 - Quota d√©pass√©")
                
            else:
                logging.warning(f"    ‚ùå Erreur {response.status_code}: {response.text[:100]}")
                
        except requests.exceptions.Timeout:
            logging.error(f"    ‚ùå Timeout - Le serveur ne r√©pond pas")
        except requests.exceptions.ConnectionError:
            logging.error(f"    ‚ùå Erreur de connexion")
        except Exception as e:
            logging.error(f"    ‚ùå Erreur: {str(e)[:100]}")
    
    return False, None

def main():
    logging.info("üîç D√âMARRAGE DU TEST DES 33 CL√âS API GEMINI")
    logging.info("üìã Versions API disponibles: v1, v2, v2beta, v2internal, v3, v3beta")
    logging.info("üìù Version du script: 7.3\n")
    
    # Charger les cl√©s depuis les variables d'environnement
    api_keys = []
    for i in range(1, 34):  # Tester jusqu'√† 33 cl√©s
        key = os.environ.get(f'GOOGLE_API_KEY_{i}')
        if key:
            api_keys.append((i, key))
    
    if not api_keys:
        logging.error("‚ùå Aucune cl√© API trouv√©e dans les variables d'environnement")
        logging.error("   V√©rifiez que GOOGLE_API_KEY_1, GOOGLE_API_KEY_2, etc. sont d√©finis")
        logging.error("\nüí° Pour d√©finir les variables:")
        logging.error("   1. Cr√©ez un fichier .env")
        logging.error("   2. Ajoutez: export GOOGLE_API_KEY_1='votre_cl√©'")
        logging.error("   3. Chargez: source .env")
        return
    
    logging.info(f"üìä {len(api_keys)} cl√©(s) API trouv√©e(s) sur 33 possibles\n")
    
    if len(api_keys) < 33:
        logging.warning(f"‚ö†Ô∏è  Attention: Seulement {len(api_keys)} cl√©s trouv√©es sur 33 attendues")
        logging.warning(f"   Cl√©s manquantes: {33 - len(api_keys)}")
        logging.warning(f"   Pour performances optimales, configurez toutes les 33 cl√©s\n")
    
    working_keys = []
    failed_keys = []
    
    for key_num, key in api_keys:
        success, working_config = test_gemini_api_key(key, key_num)
        
        if success:
            working_keys.append((key_num, working_config))
        else:
            failed_keys.append(key_num)
        
        if key_num < len(api_keys):
            logging.info("\n‚è≥ Pause de 2 secondes avant le test suivant...")
            time.sleep(2)
    
    # R√©sum√© final
    logging.info("\n" + "="*60)
    logging.info("üìä R√âSUM√â DES TESTS")
    logging.info("="*60)
    logging.info(f"‚úÖ Cl√©s fonctionnelles : {len(working_keys)}/{len(api_keys)}")
    
    # Statistiques de performance
    if len(api_keys) == 33:
        logging.info(f"üéØ Configuration optimale: 33/33 cl√©s test√©es")
    elif len(api_keys) >= 20:
        logging.info(f"‚úÖ Configuration bonne: {len(api_keys)}/33 cl√©s test√©es")
    elif len(api_keys) >= 10:
        logging.info(f"‚ö†Ô∏è  Configuration minimale: {len(api_keys)}/33 cl√©s test√©es")
    else:
        logging.info(f"‚ùå Configuration insuffisante: {len(api_keys)}/33 cl√©s test√©es")
    
    if working_keys:
        logging.info(f"\nüéâ Cl√©s API fonctionnelles:")
        for key_num, config in working_keys[:5]:  # Afficher les 5 premi√®res
            logging.info(f"   ‚Ä¢ Cl√© #{key_num} : Mod√®le '{config['model']}' (API {config['version']})")
        
        if len(working_keys) > 5:
            logging.info(f"   ... et {len(working_keys) - 5} autres cl√©s fonctionnelles")
        
        logging.info(f"\nüí° RECOMMANDATION:")
        recommended_config = working_keys[0][1]
        logging.info(f"   Mod√®le √† utiliser : {recommended_config['model']}")
        logging.info(f"   Version API : {recommended_config['version']}")
        
        # Afficher la configuration √† copier dans le code
        logging.info(f"\nüìù Configuration √† utiliser dans votre code Python:")
        logging.info(f"   GEMINI_MODEL = \"{recommended_config['model']}\"")
        logging.info(f"   GEMINI_API_VERSION = \"{recommended_config['version']}\"")
        logging.info(f"\nüìã URL API:")
        logging.info(f"   https://generativelanguage.googleapis.com/{recommended_config['version']}/models/{recommended_config['model']}:generateContent?key={{api_key}}")
        
        # Estimation de capacit√©
        logging.info(f"\nüìà CAPACIT√â DE TRAITEMENT:")
        logging.info(f"   ‚Ä¢ Requ√™tes/minute: {len(working_keys) * 15} req/min")
        logging.info(f"   ‚Ä¢ Requ√™tes/heure: {len(working_keys) * 15 * 60:,} req/h")
        logging.info(f"   ‚Ä¢ Requ√™tes/jour: {len(working_keys) * 1500:,} req/jour")
        
        if len(working_keys) >= 30:
            logging.info(f"   üöÄ Performance MAXIMALE - Capacit√© excellente!")
        elif len(working_keys) >= 20:
            logging.info(f"   ‚úÖ Performance √âLEV√âE - Capacit√© tr√®s bonne")
        elif len(working_keys) >= 10:
            logging.info(f"   ‚úîÔ∏è  Performance STANDARD - Capacit√© suffisante")
        else:
            logging.info(f"   ‚ö†Ô∏è  Performance LIMIT√âE - Ajoutez plus de cl√©s")
    
    if failed_keys:
        logging.warning(f"\n‚ö†Ô∏è  Cl√©s non fonctionnelles : {failed_keys}")
        logging.warning(f"\nüîß ACTIONS CORRECTIVES:")
        logging.warning(f"   1. V√©rifiez que les cl√©s sont cr√©√©es sur: https://aistudio.google.com/app/apikey")
        logging.warning(f"   2. Activez l'API 'Generative Language API' dans Google Cloud Console")
        logging.warning(f"   3. Assurez-vous que les cl√©s n'ont pas de restrictions d'API")
        logging.warning(f"   4. V√©rifiez que le quota n'est pas d√©pass√©")
        logging.warning(f"   5. Attendez quelques minutes apr√®s cr√©ation de la cl√©")
        logging.warning(f"\n   Pour recr√©er les cl√©s en erreur:")
        for key_num in failed_keys[:3]:  # Montrer les 3 premi√®res
            logging.warning(f"   - Cl√© #{key_num}: Supprimez et recr√©ez sur Google AI Studio")
    
    if not working_keys:
        logging.error(f"\n‚ùå AUCUNE CL√â FONCTIONNELLE")
        logging.error(f"   Le syst√®me ne pourra pas effectuer d'analyses fondamentales")
        logging.error(f"   Corrigez les cl√©s API avant de continuer")
        logging.error(f"\n   √âtapes de r√©solution:")
        logging.error(f"   1. V√©rifiez votre connexion Internet")
        logging.error(f"   2. Allez sur https://aistudio.google.com/app/apikey")
        logging.error(f"   3. Cr√©ez de nouvelles cl√©s API")
        logging.error(f"   4. V√©rifiez que l'API Generative Language est activ√©e")
        logging.error(f"   5. Relancez ce test apr√®s 5 minutes")
    else:
        percentage = (len(working_keys) / len(api_keys)) * 100
        logging.info(f"\n‚úÖ TAUX DE SUCC√àS : {percentage:.1f}%")
        
        if percentage == 100:
            logging.info(f"üéâ PARFAIT ! Toutes les cl√©s fonctionnent")
            logging.info(f"‚úÖ VOUS POUVEZ LANCER LE WORKFLOW GITHUB ACTIONS")
        elif percentage >= 90:
            logging.info(f"‚úÖ EXCELLENT ! Presque toutes les cl√©s fonctionnent")
            logging.info(f"‚úÖ VOUS POUVEZ LANCER LE WORKFLOW GITHUB ACTIONS")
        elif percentage >= 70:
            logging.info(f"‚úÖ BIEN ! La majorit√© des cl√©s fonctionnent")
            logging.info(f"üí° Recommandation : Corrigez les cl√©s en erreur pour performances optimales")
            logging.info(f"‚úÖ VOUS POUVEZ LANCER LE WORKFLOW GITHUB ACTIONS")
        elif percentage >= 50:
            logging.warning(f"‚ö†Ô∏è  MOYEN ! Seulement {percentage:.0f}% des cl√©s fonctionnent")
            logging.warning(f"üí° Recommandation : Corrigez au moins 70% des cl√©s avant de lancer")
        else:
            logging.error(f"‚ùå INSUFFISANT ! Moins de 50% des cl√©s fonctionnent")
            logging.error(f"‚ùå NE LANCEZ PAS LE WORKFLOW - Corrigez d'abord les cl√©s")
    
    # Informations compl√©mentaires
    logging.info(f"\n" + "="*60)
    logging.info(f"üìö INFORMATIONS COMPL√âMENTAIRES")
    logging.info(f"="*60)
    logging.info(f"üîó Ressources utiles:")
    logging.info(f"   ‚Ä¢ Google AI Studio: https://aistudio.google.com/app/apikey")
    logging.info(f"   ‚Ä¢ Documentation API: https://ai.google.dev/gemini-api/docs")
    logging.info(f"   ‚Ä¢ Guide configuration: Voir CONFIGURATION_33_CLES.md")
    
    logging.info(f"\nüíæ Configuration GitHub Secrets:")
    logging.info(f"   Pour chaque cl√© fonctionnelle, cr√©ez un secret:")
    logging.info(f"   Settings ‚Üí Secrets and variables ‚Üí Actions ‚Üí New secret")
    logging.info(f"   Name: GOOGLE_API_KEY_X (o√π X = 1 √† 33)")
    logging.info(f"   Value: [Votre cl√© API]")
    
    logging.info(f"\n‚è≠Ô∏è  PROCHAINES √âTAPES:")
    if len(working_keys) >= len(api_keys) * 0.7:
        logging.info(f"   1. ‚úÖ Les cl√©s sont pr√™tes")
        logging.info(f"   2. Ajoutez-les dans GitHub Secrets")
        logging.info(f"   3. Lancez le workflow GitHub Actions")
        logging.info(f"   4. V√©rifiez les logs de l'√©tape 4 (Analyse fondamentale)")
    else:
        logging.info(f"   1. ‚ö†Ô∏è  Corrigez les cl√©s en erreur: {failed_keys}")
        logging.info(f"   2. Relancez ce test: python test_gemini_api.py")
        logging.info(f"   3. Une fois >70% OK, ajoutez dans GitHub Secrets")
        logging.info(f"   4. Lancez le workflow GitHub Actions")
    
    logging.info(f"\n" + "="*60)
    
    # Code de sortie
    if len(working_keys) >= len(api_keys) * 0.7:
        logging.info(f"‚úÖ TEST R√âUSSI - Syst√®me pr√™t √† d√©ployer")
        return 0
    else:
        logging.warning(f"‚ö†Ô∏è  TEST PARTIEL - Corrections n√©cessaires")
        return 1

if __name__ == "__main__":
    import sys
    exit_code = main()
    sys.exit(exit_code)
