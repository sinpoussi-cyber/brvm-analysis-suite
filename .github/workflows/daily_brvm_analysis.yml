name: Analyse Quotidienne BRVM

on:
  schedule:
    # Ex√©cution du lundi au vendredi √† 20h00 UTC (20h GMT, 21h Paris hiver)
    - cron: '0 20 * * 1-5'
  workflow_dispatch:  # Permet le d√©clenchement manuel

jobs:
  analyze-brvm:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6 heures max
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
    
    - name: Configuration Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Installation de Chrome et ChromeDriver
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gnupg
        wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
        # T√©l√©charger ChromeDriver compatible
        CHROME_VERSION=$(google-chrome --version | awk '{print $3}' | cut -d'.' -f1)
        CHROMEDRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_${CHROME_VERSION}")
        wget -q "https://storage.googleapis.com/chrome-for-testing-public/${CHROMEDRIVER_VERSION}/linux64/chromedriver-linux64.zip"
        unzip chromedriver-linux64.zip
        sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/chromedriver
        
        echo "Chrome version: $(google-chrome --version)"
        echo "ChromeDriver version: $(chromedriver --version)"
    
    - name: Installation des d√©pendances Python
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: V√©rification des secrets
      run: |
        echo "‚úÖ V√©rification des variables d'environnement..."
        if [ -z "${{ secrets.DB_NAME }}" ]; then echo "‚ùå DB_NAME manquant"; exit 1; fi
        if [ -z "${{ secrets.DB_USER }}" ]; then echo "‚ùå DB_USER manquant"; exit 1; fi
        if [ -z "${{ secrets.DB_PASSWORD }}" ]; then echo "‚ùå DB_PASSWORD manquant"; exit 1; fi
        if [ -z "${{ secrets.DB_HOST }}" ]; then echo "‚ùå DB_HOST manquant"; exit 1; fi
        echo "‚úÖ Secrets de base de donn√©es OK"
    
    - name: Ex√©cution de l'analyse compl√®te BRVM
      env:
        # Secrets de base de donn√©es PostgreSQL
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        
        # Cl√©s API Google Gemini (pour analyse IA)
        GOOGLE_API_KEY_1: ${{ secrets.GOOGLE_API_KEY_1 }}
        GOOGLE_API_KEY_2: ${{ secrets.GOOGLE_API_KEY_2 }}
        GOOGLE_API_KEY_3: ${{ secrets.GOOGLE_API_KEY_3 }}
        GOOGLE_API_KEY_4: ${{ secrets.GOOGLE_API_KEY_4 }}
        GOOGLE_API_KEY_5: ${{ secrets.GOOGLE_API_KEY_5 }}
        
        # Secrets Google Sheets (optionnel)
        GSPREAD_SERVICE_ACCOUNT: ${{ secrets.GSPREAD_SERVICE_ACCOUNT }}
        SPREADSHEET_ID: ${{ secrets.SPREADSHEET_ID }}
      run: |
        echo "üöÄ D√©marrage de l'analyse BRVM..."
        python main.py
    
    - name: Upload des rapports g√©n√©r√©s
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: rapports-brvm-${{ github.run_number }}
        path: |
          *.docx
        retention-days: 30
        if-no-files-found: warn
    
    - name: R√©sum√© de l'ex√©cution
      if: always()
      run: |
        echo "üìä Ex√©cution termin√©e"
        echo "Date: $(date)"
        echo "Statut: ${{ job.status }}"
