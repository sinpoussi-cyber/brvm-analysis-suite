# ==============================================================================
# MODULE: FUNDAMENTAL ANALYZER (V6.0 - GEMINI 2.5 PRO)
# ==============================================================================

import requests
from bs4 import BeautifulSoup
import time
import re
import os
from datetime import datetime
import logging
import unicodedata
import urllib3
import json
from collections import defaultdict
from seleniumwire import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import psycopg2
import base64

# Import du gestionnaire de synchronisation
from sync_data_manager import SyncDataManager

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s: %(message)s')

DB_NAME = os.environ.get('DB_NAME')
DB_USER = os.environ.get('DB_USER')
DB_PASSWORD = os.environ.get('DB_PASSWORD')
DB_HOST = os.environ.get('DB_HOST')
DB_PORT = os.environ.get('DB_PORT')

REQUESTS_PER_MINUTE_LIMIT = 10

class BRVMAnalyzer:
    def __init__(self):
        self.societes_mapping = {
            # ... (mapping complet, identique √† avant)
        }
        self.driver = None
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Content-Type': 'application/json'
        })
        self.analysis_memory = set()
        self.company_ids = {}
        self.newly_analyzed_reports = []
        self.api_keys = []
        self.current_key_index = 0
        self.request_timestamps = []
        self.sync_manager = SyncDataManager()

    def _configure_api_keys(self):
        for i in range(1, 20): 
            key = os.environ.get(f'GOOGLE_API_KEY_{i}')
            if key: self.api_keys.append(key)
        if not self.api_keys:
            logging.error("‚ùå Aucune cl√© API trouv√©e.")
            return False
        logging.info(f"‚úÖ {len(self.api_keys)} cl√©(s) API Gemini charg√©es.")
        return True

    def _analyze_pdf_with_direct_api(self, company_id, symbol, report):
        pdf_url = report['url']
        if pdf_url in self.analysis_memory:
            return

        now = time.time()
        self.request_timestamps = [ts for ts in self.request_timestamps if now - ts < 60]
        if len(self.request_timestamps) >= REQUESTS_PER_MINUTE_LIMIT:
            sleep_time = 60 - (now - self.request_timestamps[0])
            logging.warning(f"Limite de requ√™tes/minute atteinte. Pause de {sleep_time + 1:.1f} secondes...")
            time.sleep(sleep_time + 1)
            self.request_timestamps = []

        if self.current_key_index >= len(self.api_keys):
            logging.error("Toutes les cl√©s API ont √©t√© √©puis√©es. Arr√™t des analyses.")
            return

        api_key = self.api_keys[self.current_key_index]
        
        # ‚úÖ UTILISATION DE GEMINI 2.5 PRO
        api_url = f"https://generativelanguage.googleapis.com/v1/models/gemini-2.5-pro:generateContent?key={api_key}"
        
        # Alternative si gemini-2.5-pro ne fonctionne pas :
        # api_url = f"https://generativelanguage.googleapis.com/v1/models/gemini-1.5-pro:generateContent?key={api_key}"
        
        try:
            logging.info(f"    -> Nouvelle analyse IA Gemini 2.5 Pro (cl√© #{self.current_key_index + 1}) : {os.path.basename(pdf_url)}")
            
            # T√©l√©charger le PDF
            pdf_response = self.session.get(pdf_url, timeout=45, verify=False)
            pdf_response.raise_for_status()
            pdf_data = base64.b64encode(pdf_response.content).decode('utf-8')

            # Prompt optimis√© pour Gemini 2.5 Pro
            prompt = """
Tu es un analyste financier expert sp√©cialis√© dans les entreprises de la zone UEMOA cot√©es √† la BRVM.

**MISSION** : Analyse le document PDF ci-joint (rapport financier) et fournis une synth√®se concise en fran√ßais, structur√©e en points cl√©s.

**STRUCTURE DE L'ANALYSE** :

1. **üìä Chiffre d'Affaires (CA)**
   - Montant et variation (%, valeur)
   - Facteurs explicatifs de l'√©volution

2. **üí∞ R√©sultat Net (RN)**
   - Montant et variation
   - Facteurs d'influence

3. **üíµ Dividende**
   - Montant propos√©/vers√©
   - Rendement si calculable
   - Si non mentionn√©, indiquer : "Politique de dividende non mentionn√©e"

4. **üè≠ Performance Op√©rationnelle**
   - Rentabilit√© d'exploitation
   - Marges (si disponibles)

5. **üîÆ Perspectives & Vigilance**
   - Points forts √† noter
   - Risques/vigilances
   - Investissements majeurs pr√©vus

**CONSIGNES** :
- Sois factuel et pr√©cis
- Utilise UNIQUEMENT les donn√©es du document
- Si une info manque, le mentionner clairement
- Privil√©gie les chiffres et pourcentages
- Synth√®se maximale : 250-300 mots

Commence ton analyse maintenant.
"""

            # Format de requ√™te optimis√©
            request_body = {
                "contents": [{
                    "parts": [
                        {"text": prompt},
                        {
                            "inline_data": {
                                "mime_type": "application/pdf",
                                "data": pdf_data
                            }
                        }
                    ]
                }],
                "generationConfig": {
                    "temperature": 0.3,  # Moins cr√©atif, plus factuel
                    "topK": 40,
                    "topP": 0.95,
                    "maxOutputTokens": 1024,  # ~300 mots en fran√ßais
                }
            }

            self.request_timestamps.append(time.time())
            
            headers = {
                "Content-Type": "application/json"
            }
            
            response = requests.post(api_url, json=request_body, headers=headers, timeout=120)

            # Gestion sp√©cifique des erreurs
            if response.status_code == 404:
                logging.warning(f"    -> ‚ö†Ô∏è Gemini 2.5 Pro non disponible avec cette cl√©. Tentative avec Gemini 1.5 Pro...")
                # Fallback vers Gemini 1.5 Pro
                api_url_fallback = f"https://generativelanguage.googleapis.com/v1/models/gemini-1.5-pro:generateContent?key={api_key}"
                response = requests.post(api_url_fallback, json=request_body, headers=headers, timeout=120)
                
                if response.status_code == 404:
                    logging.error(f"    -> ‚ùå Gemini 1.5 Pro non plus disponible. Passage √† la cl√© suivante.")
                    self.current_key_index += 1
                    if self.current_key_index < len(self.api_keys):
                        self._analyze_pdf_with_direct_api(company_id, symbol, report)
                    return
            
            if response.status_code == 429:
                logging.warning(f"Quota atteint pour la cl√© API #{self.current_key_index + 1}. Passage √† la suivante.")
                self.current_key_index += 1
                if self.current_key_index < len(self.api_keys):
                    self._analyze_pdf_with_direct_api(company_id, symbol, report)
                return

            response.raise_for_status()
            response_json = response.json()
            
            # Extraction de la r√©ponse
            try:
                analysis_text = response_json['candidates'][0]['content']['parts'][0]['text']
            except (KeyError, IndexError) as e:
                logging.error(f"    -> Erreur de parsing de la r√©ponse: {e}")
                # Log de la r√©ponse pour debugging
                logging.debug(f"    -> R√©ponse compl√®te: {json.dumps(response_json, indent=2)[:500]}")
                return

            if "erreur" not in analysis_text.lower() and len(analysis_text) > 50:
                # SYNCHRONISATION AUTOMATIQUE
                self.sync_manager.sync_fundamental_analysis(
                    company_id=company_id,
                    symbol=symbol,
                    report_url=report['url'],
                    report_title=report['titre'],
                    report_date=report['date'],
                    analysis_summary=analysis_text
                )
                
                self.analysis_memory.add(pdf_url)
                self.newly_analyzed_reports.append(f"Rapport pour {symbol}:\n{analysis_text}\n")
                logging.info(f"    -> ‚úÖ Analyse IA compl√©t√©e ({len(analysis_text)} caract√®res)")
            else:
                logging.warning(f"    -> ‚ö†Ô∏è Analyse trop courte ou contient des erreurs")

        except requests.exceptions.HTTPError as e:
            if e.response.status_code == 404:
                logging.error(f"    -> ‚ùå ERREUR 404: Mod√®le Gemini non accessible")
                logging.error(f"    -> V√©rifiez vos cl√©s sur https://aistudio.google.com/app/apikey")
            elif e.response.status_code == 400:
                logging.error(f"    -> ‚ùå ERREUR 400: Requ√™te invalide")
                logging.error(f"    -> R√©ponse: {e.response.text[:200]}")
            else:
                logging.error(f"    -> Erreur HTTP {e.response.status_code}: {e}")
            
            self.current_key_index += 1
            if self.current_key_index < len(self.api_keys):
                self._analyze_pdf_with_direct_api(company_id, symbol, report)
                
        except requests.exceptions.Timeout:
            logging.error(f"    -> ‚è±Ô∏è Timeout lors de l'appel API (>120s)")
            self.current_key_index += 1
            if self.current_key_index < len(self.api_keys):
                self._analyze_pdf_with_direct_api(company_id, symbol, report)
                
        except Exception as e:
            logging.error(f"    -> Erreur technique avec la cl√© #{self.current_key_index + 1} : {e}")
            self.current_key_index += 1
            if self.current_key_index < len(self.api_keys):
                self._analyze_pdf_with_direct_api(company_id, symbol, report)

    # ... (reste des m√©thodes identique : setup_selenium, _normalize_text, etc.)
    # ... (m√©thodes _find_all_reports, run_and_get_results restent inchang√©es)

if __name__ == "__main__":
    analyzer = BRVMAnalyzer()
    analyzer.run_and_get_results()
